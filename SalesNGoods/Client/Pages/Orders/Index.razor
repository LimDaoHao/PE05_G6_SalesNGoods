@page "/orders/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title">Order List</h3>
<br />

@if (Orders == null)
{
    <div class="alert alert-info">Loading Orders...</div>
}
else
{
    <table class="table table-responsive" id="ordersTable">
        <thead>
            <tr>
                <th>Order No.</th>
                <th>Order Date</th>
                <th>View Order</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <th>@order.Id</th>
                    <th>@order.OrderDate</th>
                    <th>
                        <a href="/orders/view/@order.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                    </th>
                </tr>
            }
        </tbody>
    </table>
}





@code {
    private List<Order> Orders;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
    }
    async Task Delete(int OrderId)
    {
        var order = Orders.First(q => q.Id == OrderId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {order.Id}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrdersEndpoint}/{OrderId}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#ordersTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#ordersTable");
    }
}
