@page "/orders/view/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager
@implements IDisposable

<h3 class="card-title">Product List</h3>
<br />

@if (OrderItems == null)
{
    <div class="alert alert-info">Loading Products...</div>
}
else
{
    <table class="table table-responsive" id="orderproductsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Brand</th>
                <th>Price</th>
                <th>Qty</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderitem in OrderItems)
            {
                if (orderitem.OrderId == id)
                {
                    <tr>
                        <th>@orderitem.Product.Name</th>
                        <th>@orderitem.Product.Brand</th>
                        <th>$@orderitem.Product.Price</th>
                        <th>@orderitem.OrderQty</th>
                        <td>
                            <a href="/cart/view/@orderitem.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/cart/edit/@orderitem.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(orderitem.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}





@code {
    [Parameter] public int id { get; set; }
    private List<OrderItem> OrderItems;
    protected async override Task OnInitializedAsync()
    {
        OrderItems = await _client.GetFromJsonAsync<List<OrderItem>>($"{Endpoints.OrderItemsEndpoint}");
    }
    async Task Delete(int orderitemId)
    {
        var orderitem = OrderItems.First(q => q.Id == orderitemId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {orderitem.Product.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrderItemsEndpoint}/{orderitemId}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#orderproductsTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#orderproductsTable");
    }

}
