@inject HttpClient _client

<EditForm Model="@product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
    <div class="form-group">
        <label>Name:</label>
        <div>
            <InputText @bind-Value="@product.Name" class="form-control" />
            <ValidationMessage For="@(() => product.Name)" />
        </div>
    </div>
    <div class="form-group">
        <label>Price:</label>
        <div>
            <InputNumber @bind-Value="@product.Price" class="form-control" />
            <ValidationMessage For="@(() => product.Price)" />
        </div>
    </div>
    <div class="form-group">
        <label>Stock:</label>
        <div>
            <InputNumber @bind-Value="@product.Stock" class="form-control" />
            <ValidationMessage For="@(() => product.Stock)" />
        </div>
    </div>
    <div class="form-group">
        <label>Brand:</label>
        <div>
            <InputText @bind-Value="@product.Brand" class="form-control" />
            <ValidationMessage For="@(() => product.Brand)" />
        </div>
    </div>
    <div class="form-group">
        <label>Condition:</label>
        <div>
            <InputText @bind-Value="@product.Condition" class="form-control" />
            <ValidationMessage For="@(() => product.Condition)" />
        </div>
    </div>
    <div class="form-group">
        <label>Category:</label>
        <div>
            <InputSelect @bind-Value="product.CategoryId" class="form-control">
                <option value="">-- Select Category --</option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.Id">
                            @category.Name
                        </option>}
                }
            </InputSelect>
            <ValidationMessage For="@(() => product.CategoryId)" />
        </div>
    </div>
    </fieldset>
    @if (!Disabled)
    {
    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    }
    <BackToList Target="products" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Customer> Customers;
    private IList<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}"); ;
    }
}