@page "/products/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Products</h3>
<a href="/products/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    List New Product
</a>
<br />
<br />

@if (Products == null)
{
    <div class="alert alert-info">Loading Products...</div>
}
else
{
    <table class="table table-responsive" id="productsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Brand</th>
                <th>Category</th>
                <th>Condition</th>
                <th>Stock</th>
                <th>AddToCart</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Brand</td>
                    <td>@product.Category.Name</td>
                    <td>@product.Condition</td>
                    <td>@product.Stock</td>
                    <td>
                        <a href="/products/view/@product.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <button class="btn btn-dark" @onclick="@(()=>AddCart(product.Id))">
                            <span class="oi oi-cart"></span>
                        </button>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(product.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> Products;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }
    async Task AddCart(int ProductId)
    {
        var product = Products.First(q => q.Id == ProductId);

        OrderItem orderitem = new OrderItem();
        orderitem.OrderQty = 1;
        orderitem.ProductId = product.Id;
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to add {product.Name} to cart?");
        if (confirm)
        {
            await _client.PostAsJsonAsync(Endpoints.OrderItemsEndpoint, orderitem);
        }
    }
    async Task Delete(int ProductId)
    {
        var product = Products.First(q => q.Id == ProductId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.Name}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{ProductId}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#productsTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
    }

}
