@page "/payments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable

<h3 class="card-title">Payment List</h3>
<br />
<br />

@if (Payments == null)
{
    <div class="alert alert-info">Loading Payments...</div>
}
else
{
    <table class="table table-responsive" id="paymentsTable">
        <thead>
            <tr>
                <th>Method</th>
                <th>Date&Time</th>
                <th>Order</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var payment in Payments)
            {
                <tr>
                    <td>@payment.Method</td>
                    <td>@payment.DateTime</td>
                    <td>@payment.OrderId</td>
                    <td>
                        <a href="/payments/view/@payment.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/payments/edit/@payment.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        @*<button class="btn btn-danger" @onclick="@(()=>Delete(payment.Id))">
                            <span class="oi oi-delete"></span>
                        </button>*@

                    </td>
                </tr>
            }
        </tbody>
    </table>
}





@code {
    private List<Payment> Payments;

    protected async override Task OnInitializedAsync()
    {
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
    }

    //async Task Delete(int PaymentId)
    //{
    //    var payment = Payments.First(q => q.Id == PaymentId);
    //    var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {payment.Method}");
    //    if (confirm)
    //    {
    //        await _client.DeleteAsync($"{Endpoints.PaymentsEndpoint}/{PaymentId}");
    //        await OnInitializedAsync();
    //    }
    //}
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#paymentsTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#paymentsTable");
    }
}
