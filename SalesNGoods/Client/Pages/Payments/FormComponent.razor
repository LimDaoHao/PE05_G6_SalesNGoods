@inject HttpClient _client

<EditForm Model="@payment" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Method:</label>
        <div>
            <InputText @bind-Value="@payment.Method" class="form-control" />
            <ValidationMessage For="@(() => payment.Method)" />
        </div>
    </div>
    <div class="form-group">
        <label>Date&Time:</label>
        <div>
            <InputNumber @bind-Value="@payment.DateTime" class="form-control" />
            <ValidationMessage For="@(() => payment.DateTime)" />
        </div>
    </div>
    <div class="form-group">
        <label>Order: </label>
        <div>
            <InputSelect @bind-Value="payment.OrderId" class="form-control">
                <option value="">-- Select Order --</option>
                @if (Orders != null)
                {
                    foreach (var order in Orders)
                    {
                        <option value="@order.Id">
                            @order.Id
                            -
                            @order.Customer.Name
                        </option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => payment.OrderId)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    <BackToList Target="payments" />
</EditForm>
@code {
    [Parameter] public Payment payment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Order> Orders;

    protected async override Task OnInitializedAsync()
    {
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}"); ;
    }
}