@page "/cart/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Cart</h3>
<br />

@if (OrderItems == null)
{
    <div class="alert alert-info">Loading Products...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Brand</th>
                <th>Category</th>
                <th>Condition</th>
                <th>Stock</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var orderitem in OrderItems)
            {
            <tr>
                <td>@orderitem.Product.Name</td>
                <td>@orderitem.Product.Brand</td>
                <td>@orderitem.Product.Category.Name</td>
                <td>@orderitem.Product.Condition</td>
                <td>@orderitem.Product.Stock</td>
                <td>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(orderitem.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}





@code {
    private List<OrderItem> OrderItems;

    protected async override Task OnInitializedAsync()
    {
        OrderItems = await _client.GetFromJsonAsync<List<OrderItem>>($"{Endpoints.OrderItemsEndpoint}");
    }

    async Task Delete(int OrderItemId)
    {
        var orderitem = OrderItems.First(q => q.Id == OrderItemId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {orderitem.Product.Name}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.OrderItemsEndpoint}/{OrderItemId}");
            await OnInitializedAsync();
        }
    }
}
