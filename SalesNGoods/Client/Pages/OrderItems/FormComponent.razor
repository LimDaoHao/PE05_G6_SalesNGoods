@inject HttpClient _client

<EditForm Model="@orderitem" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Product:</label>
        <div>
            <InputSelect @bind-Value="orderitem.ProductId" class="form-control">
                <option value="">-- Select Product --</option>
                @if (Products != null)
                {
                    foreach (var product in Products)
                    {
                        <option value="@product.Id">
                            @product.Name -- @product.Stock -- $@product.Price
                        </option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => orderitem.ProductId)" />
        </div>
    </div>
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Quantity:</label>
            <div>
                <InputNumber @bind-Value="@orderitem.OrderQty" class="form-control" />
                <ValidationMessage For="@(() => orderitem.OrderQty)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="cart" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public OrderItem orderitem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private IList<Product> Products;

   

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }


}
